/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package schoolsystem;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;


/**
 *
 * @author codeGeek
 */
public class ViewBalance extends javax.swing.JDialog {
    
    DatabaseConnect dbcon=null;
    Connection conn=null;
    PreparedStatement pst=null;
    private ResultSet rs;
    private double expectedtermly;
    private double paidtermly;
    private double expectedyear;
    private  double paidyear;
    private  double overpay,underpay;
    double expected_term = 0,paid_term = 0;
    /* Creates new form ViewBalance
     */
    public ViewBalance(JDialog frame) {
        super(frame, ModalityType.APPLICATION_MODAL);
        initComponents();
        dbcon=new DatabaseConnect();
        try {
            conn=dbcon.dbConnect();
        } catch (Exception ex) {
            Logger.getLogger(ViewBalance.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_choice = new javax.swing.ButtonGroup();
        jTextField1 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        txt_admission_no = new javax.swing.JTextField();
        btn_view = new javax.swing.JButton();
        combo_term = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        combo_year = new javax.swing.JComboBox();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Balance view");
        setAlwaysOnTop(true);
        setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("show Balance"));
        jPanel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        btn_view.setText("View");
        btn_view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_viewActionPerformed(evt);
            }
        });

        combo_term.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "TERM 1", "TERM 2", "TERM 3" }));

        jLabel1.setText("Admnission no:");

        jLabel2.setText("Year");

        jLabel3.setText("Term");

        combo_year.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_view)
                    .addComponent(txt_admission_no, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_term, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(131, 131, 131))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txt_admission_no, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(combo_year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_term, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(3, 3, 3)
                .addComponent(btn_view)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(9, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_viewActionPerformed
     //checkBalancePerStudent();
       if (admnoValid(txt_admission_no.getText())){
     adjustPayment();
        new MyBalance(this, expected_term, paid_term, expectedyear, paidyear, false).setVisible(true
     );
       }
       else{
           
           JOptionPane.showMessageDialog(this, "Admission Number Invalid");
           txt_admission_no.grabFocus();
       }
             
             
    }//GEN-LAST:event_btn_viewActionPerformed

    /**
     * @param args the command line arguments
     */
   
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btn_choice;
    private javax.swing.JButton btn_view;
    private javax.swing.JComboBox combo_term;
    private javax.swing.JComboBox combo_year;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField txt_admission_no;
    // End of variables declaration//GEN-END:variables

    
public void adjustPayment(){
    if(combo_year.getSelectedItem().equals("1")){       
        switch(combo_term.getSelectedItem().toString()){              
            case "TERM 1":              
                try {
            String expectedfeetermly="select Amount from expectedfee where Term='TERM 1'";
            String fee_paidtermly="select sum(Paid_amount)from fee where term='TERM 1' and student_adm='"+txt_admission_no.getText()+"'";           
            pst=conn.prepareStatement(expectedfeetermly);
            rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1);              
            }
            pst=conn.prepareStatement(fee_paidtermly);
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1);          
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
           }
           else
               setUnderpay(expected_term-paid_term);
               

        } catch (SQLException ex) {
            Logger.getLogger(ViewBalance.class.getName()).log(Level.SEVERE, null, ex);
        }
                break;
            case "TERM 2":   
                  try {
            String expectedfeetermly="select Amount from expectedfee where Term='TERM 1'";
            String fee_paidtermly="select sum(Paid_amount)from fee where term='TERM 1' and student_adm='"+txt_admission_no.getText()+"'";           
            pst=conn.prepareStatement(expectedfeetermly);
            rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1);              
            }
            pst=conn.prepareStatement(fee_paidtermly);
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1);          
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
           }
           else
               setUnderpay(expected_term-paid_term);
               

        } catch (SQLException ex) {
            Logger.getLogger(ViewBalance.class.getName()).log(Level.SEVERE, null, ex);
        }
                try {
            String expectedfeetermly="select Amount from expectedfee where Term='TERM 2'";
            String fee_paidtermly="select sum(Paid_amount)from fee where term='TERM 2' and student_adm='"+txt_admission_no.getText()+"'";           
            pst=conn.prepareStatement(expectedfeetermly);
            rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1)+getUnderpay();              
            }
            pst=conn.prepareStatement(fee_paidtermly);
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1)+getOverpay();  
                
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
           }
           else
               setUnderpay(expected_term-paid_term);
               

        } catch (SQLException ex) {
            Logger.getLogger(ViewBalance.class.getName()).log(Level.SEVERE, null, ex);
        }
                break;
            case "TERM 3": 
                  try {
            String expectedfeetermly="select Amount from expectedfee where Term='TERM 1'";
            String fee_paidtermly="select sum(Paid_amount)from fee where term='TERM 1' and student_adm='"+txt_admission_no.getText()+"'";           
            pst=conn.prepareStatement(expectedfeetermly);
            rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1);              
            }
            pst=conn.prepareStatement(fee_paidtermly);
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1);          
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
           }
           else
               setUnderpay(expected_term-paid_term);
               

        } catch (SQLException ex) {
            Logger.getLogger(ViewBalance.class.getName()).log(Level.SEVERE, null, ex);
        }
                    try {
            String expectedfeetermly="select Amount from expectedfee where Term='TERM 2'";
            String fee_paidtermly="select sum(Paid_amount)from fee where term='TERM 2' and student_adm='"+txt_admission_no.getText()+"'";           
            pst=conn.prepareStatement(expectedfeetermly);
            rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1)+getUnderpay();              
            }
            pst=conn.prepareStatement(fee_paidtermly);
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1)+getOverpay();          
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
           }
           else
               setUnderpay(expected_term-paid_term);
               

        } catch (SQLException ex) {
            Logger.getLogger(ViewBalance.class.getName()).log(Level.SEVERE, null, ex);
        }
                      try {
            String expectedfeetermly="select Amount from expectedfee where Term='TERM 3'";
            String fee_paidtermly="select sum(Paid_amount)from fee where term='TERM 3' and student_adm='"+txt_admission_no.getText()+"'";           
            pst=conn.prepareStatement(expectedfeetermly);
            rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1)+getUnderpay();              
            }
            pst=conn.prepareStatement(fee_paidtermly);
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1)+getOverpay();          
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
           }
           else
               setUnderpay(expected_term-paid_term);
               

        } catch (SQLException ex) {
            Logger.getLogger(ViewBalance.class.getName()).log(Level.SEVERE, null, ex);
        }
                break;
        }
        
    }
    else 
        if(combo_year.getSelectedItem().equals("2")){
            String fee_paid_yearly="select sum(Paid_amount)from fee where year=? and student_adm='"+txt_admission_no.getText()+"'";
            String expectedfeeperyear="select sum(Amount)from expectedfee where year=? ";
            String expectedfeetermly="select Amount from expectedfee where Term=? and year=2";
            String fee_paidtermly="select sum(Paid_amount)from fee where term=? and student_adm='"+txt_admission_no.getText()+"' and year=2"; 
        switch(combo_term.getSelectedItem().toString()){
            case "TERM 1":           
            
            try{
            pst=conn.prepareStatement(expectedfeeperyear);
            pst.setString(1, "1");
            rs=pst.executeQuery();
            while(rs.next()){
                expectedyear=rs.getDouble(1);
               
                
              
            }
            pst=conn.prepareStatement(fee_paid_yearly);
            pst.setString(1, "1");
            rs=pst.executeQuery();
            while(rs.next()){
                paidyear=rs.getDouble(1); 
              
            }
            if((expectedyear-paidyear)<0){
                setOverpay(0);
                setOverpay(paidyear-expectedyear);
                
            }
            else{ 
                setUnderpay(0);
                setUnderpay(expectedyear-paidyear);
               
            }
            
            //termly basis
            pst=conn.prepareStatement(expectedfeetermly);
             pst.setString(1, "TERM 1");
            rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1)+getUnderpay();
              
            }
            pst=conn.prepareStatement(fee_paidtermly);
            pst.setString(1, "TERM 1");
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1)+getOverpay(); 
                
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
              
           }
           else
               setUnderpay(expected_term-paid_term);


        } catch (SQLException ex) {
            Logger.getLogger(ViewBalance.class.getName()).log(Level.SEVERE, null, ex);
        }
                break;
            case "TERM 2": 
                try{
             pst=conn.prepareStatement(expectedfeeperyear);
            pst.setString(1, "1");
            rs=pst.executeQuery();
            while(rs.next()){
                expectedyear=rs.getDouble(1);
               
                
              
            }
            pst=conn.prepareStatement(fee_paid_yearly);
            pst.setString(1, "1");
            rs=pst.executeQuery();
            while(rs.next()){
                paidyear=rs.getDouble(1); 
              
            }
            if((expectedyear-paidyear)<0){
                setOverpay(0);
                setOverpay(paidyear-expectedyear);
               
            }
            else{ 
                setUnderpay(0);
                setUnderpay(expectedyear-paidyear);
               
            }
            
            //termly basis
            pst=conn.prepareStatement(expectedfeetermly);
             pst.setString(1, "TERM 1");
            rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1)+getUnderpay();
                
            }
            pst=conn.prepareStatement(fee_paidtermly);
            pst.setString(1, "TERM 1");
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1)+getOverpay(); 
               
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
             
           }
           else
               setUnderpay(expected_term-paid_term);
                    //term 2
              pst=conn.prepareStatement(expectedfeetermly);
              pst.setString(1, "TERM 2");
            rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1)+getUnderpay(); 
                 
            }
            pst=conn.prepareStatement(fee_paidtermly);
            pst.setString(1, "TERM 2");
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1)+getOverpay();          
               
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
               
           }
           else
               setUnderpay(expected_term-paid_term);
                       
        } catch (SQLException ex) {
            Logger.getLogger(ViewBalance.class.getName()).log(Level.SEVERE, null, ex);
        }
                break;
            case "TERM 3": 
                try{
                    //year 1
            pst=conn.prepareStatement(expectedfeeperyear);
            pst.setString(1, "1");
            rs=pst.executeQuery();
            while(rs.next()){
                expectedyear=rs.getDouble(1);
                
                
              
            }
            pst=conn.prepareStatement(fee_paid_yearly);
            pst.setString(1, "1");
            rs=pst.executeQuery();
            while(rs.next()){
                paidyear=rs.getDouble(1); 
               
            }
            if((expectedyear-paidyear)<0){
                setOverpay(0);
                setOverpay(paidyear-expectedyear);
               
            }
            else{ 
                setUnderpay(0);
                setUnderpay(expectedyear-paidyear);
               
            }
            //term 1
              pst=conn.prepareStatement(expectedfeetermly);
              pst.setString(1, "TERM 1");
              rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1)+getUnderpay();              
            }
            pst=conn.prepareStatement(fee_paidtermly);
            pst.setString(1, "TERM 1");
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1)+getOverpay();          
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
           }
           else
               setUnderpay(expected_term-paid_term);       
                
                //term 2
              pst=conn.prepareStatement(expectedfeetermly);
              pst.setString(1, "TERM 2");
            rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1)+getUnderpay();              
            }
            pst=conn.prepareStatement(fee_paidtermly);
            pst.setString(1, "TERM 2");
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1)+getOverpay();          
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
           }
           else
               setUnderpay(expected_term-paid_term);

       //term 3
              pst=conn.prepareStatement(expectedfeetermly);
              pst.setString(1, "TERM 3");
              rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1)+getUnderpay();              
            }
            pst=conn.prepareStatement(fee_paidtermly);
            pst.setString(1, "TERM 3");
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1)+getOverpay();          
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
           }
           else
               setUnderpay(expected_term-paid_term);

        } catch (SQLException ex) {
            Logger.getLogger(ViewBalance.class.getName()).log(Level.SEVERE, null, ex);
        }
                break;
        }
    }
        else if(combo_year.getSelectedItem().equals("3")){
            String expectedfeetermly="select Amount from expectedfee where Term=? and year=3";
            String fee_paidtermly="select sum(Paid_amount)from fee where term=? and student_adm='"+txt_admission_no.getText()+"' and year=3"; 
            String fee_paid_yearly="select sum(Paid_amount)from fee where year=? and student_adm='"+txt_admission_no.getText()+"'";
            String expectedfeeperyear="select sum(Amount)from expectedfee where year=? ";        
        switch(combo_term.getSelectedItem().toString()){
            case "TERM 1":             
            try{
                //year 1
             pst=conn.prepareStatement(expectedfeeperyear);
             pst.setString(1, "1");
             rs=pst.executeQuery();
            while(rs.next()){
                expectedyear=rs.getDouble(1);
               
              
            }
            pst=conn.prepareStatement(fee_paid_yearly);
            pst.setString(1, "1");
            rs=pst.executeQuery();
            while(rs.next()){
                paidyear=rs.getDouble(1); 
                
                
            }
            if((expectedyear-paidyear)<0){
                setOverpay(paidyear-expectedyear);
               
            }
            else setUnderpay(expectedyear-paidyear); 
            
            
            //year two
             pst=conn.prepareStatement(expectedfeeperyear); 
             pst.setString(1, "2");
             rs=pst.executeQuery();
            while(rs.next()){
                expectedyear=rs.getDouble(1)+getUnderpay();
              
            }
            pst=conn.prepareStatement(fee_paid_yearly);
            pst.setString(1, "2");
            rs=pst.executeQuery();
            while(rs.next()){
                paidyear=rs.getDouble(1)+getOverpay();             
            }
            if((expectedyear-paidyear)<0){
                setOverpay(paidyear-expectedyear);
            }
            else{
                setUnderpay(expectedyear-paidyear);
               
            }
            
            //term1 computation
            pst=conn.prepareStatement(expectedfeetermly);
             pst.setString(1, "TERM 1");
            rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1)+getUnderpay(); 
                   
            }
            pst=conn.prepareStatement(fee_paidtermly);
            pst.setString(1, "TERM 1");
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1)+getOverpay();          
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
              
           }
           else
               setUnderpay(expected_term-paid_term);
           
            
            } catch (SQLException ex) {
            Logger.getLogger(ViewBalance.class.getName()).log(Level.SEVERE, null, ex);
        }
                break;
            case "TERM 2": 
             try{
                 //year 1
             pst=conn.prepareStatement(expectedfeeperyear);
             pst.setString(1, "1");
             rs=pst.executeQuery();
            while(rs.next()){
                expectedyear=rs.getDouble(1);
                
              
            }
            pst=conn.prepareStatement(fee_paid_yearly);
            pst.setString(1, "1");
            rs=pst.executeQuery();
            while(rs.next()){
                paidyear=rs.getDouble(1); 
               
                
            }
            if((expectedyear-paidyear)<0){
                setOverpay(paidyear-expectedyear);
              
            }
            else setUnderpay(expectedyear-paidyear); 
           
            
            //year two
             pst=conn.prepareStatement(expectedfeeperyear); 
             pst.setString(1, "2");
             rs=pst.executeQuery();
            while(rs.next()){
                expectedyear=rs.getDouble(1)+getUnderpay();
              
            }
            pst=conn.prepareStatement(fee_paid_yearly);
            pst.setString(1, "2");
            rs=pst.executeQuery();
            while(rs.next()){
                paidyear=rs.getDouble(1)+getOverpay();             
            }
            if((expectedyear-paidyear)<0){
                setOverpay(paidyear-expectedyear);
            }
            else{
                setUnderpay(expectedyear-paidyear);
                
            }
                 //term 1
             pst=conn.prepareStatement(expectedfeetermly);
             pst.setString(1, "TERM 1");
             rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1)+getUnderpay();              
            }
            pst=conn.prepareStatement(fee_paidtermly);
            pst.setString(1, "TERM 1");
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1)+getOverpay();          
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
           }
           else
               setUnderpay(expected_term-paid_term);
           //term 2
             pst=conn.prepareStatement(expectedfeetermly);
             pst.setString(1, "TERM 2");
            rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1)+getUnderpay();              
            }
            pst=conn.prepareStatement(fee_paidtermly);
            pst.setString(1, "TERM 2");
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1)+getOverpay();          
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
           }
           else
               setUnderpay(expected_term-paid_term);
            
            } catch (SQLException ex) {
            Logger.getLogger(ViewBalance.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            
                break;
            case "TERM 3": 
                try{
                    //year 1
             pst=conn.prepareStatement(expectedfeeperyear);
             pst.setString(1, "1");
             rs=pst.executeQuery();
            while(rs.next()){
                expectedyear=rs.getDouble(1);
               
              
            }
            pst=conn.prepareStatement(fee_paid_yearly);
            pst.setString(1, "1");
            rs=pst.executeQuery();
            while(rs.next()){
                paidyear=rs.getDouble(1); 
               
                
            }
            if((expectedyear-paidyear)<0){
                setOverpay(paidyear-expectedyear);
              
            }
            else setUnderpay(expectedyear-paidyear); 
            
            
            //year two
             pst=conn.prepareStatement(expectedfeeperyear); 
             pst.setString(1, "2");
             rs=pst.executeQuery();
            while(rs.next()){
                expectedyear=rs.getDouble(1)+getUnderpay();
              
            }
            pst=conn.prepareStatement(fee_paid_yearly);
            pst.setString(1, "2");
            rs=pst.executeQuery();
            while(rs.next()){
                paidyear=rs.getDouble(1)+getOverpay();             
            }
            if((expectedyear-paidyear)<0){
                setOverpay(paidyear-expectedyear);
            }
            else{
                setUnderpay(expectedyear-paidyear);
                
            }
                    //term 1
             pst=conn.prepareStatement(expectedfeetermly);
             pst.setString(1, "TERM 1");
             rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1)+getUnderpay();              
            }
            pst=conn.prepareStatement(fee_paidtermly);
            pst.setString(1, "TERM 1");
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1)+getOverpay();          
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
           }
           else
               setUnderpay(expected_term-paid_term);
           //term 2
             pst=conn.prepareStatement(expectedfeetermly);
             pst.setString(1, "TERM 2");
            rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1)+getUnderpay();              
            }
            pst=conn.prepareStatement(fee_paidtermly);
            pst.setString(1, "TERM 2");
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1)+getOverpay();          
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
           }
           else
               setUnderpay(expected_term-paid_term);
           //term 3
            pst=conn.prepareStatement(expectedfeetermly);
            pst.setString(1, "TERM 3");
            rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1)+getUnderpay();              
            }
            pst=conn.prepareStatement(fee_paidtermly);
            pst.setString(1, "TERM 3");
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1)+getOverpay();          
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
           }
           else
               setUnderpay(expected_term-paid_term);
            
            } catch (SQLException ex) {
            Logger.getLogger(ViewBalance.class.getName()).log(Level.SEVERE, null, ex);
        }
                break;
        
    }
        }
        else if(combo_year.getSelectedItem().equals("4")){        
            String expectedfeetermly="select Amount from expectedfee where Term=? and year=4";
            String fee_paidtermly="select sum(Paid_amount)from fee where term=? and year=4 and student_adm='"+txt_admission_no.getText()+"'"; 
            String fee_paid_yearly="select sum(Paid_amount)from fee where year=? and student_adm='"+txt_admission_no.getText()+"'";
            String expectedfeeperyear="select sum(Amount)from expectedfee where year=? ";        
        switch(combo_term.getSelectedItem().toString()){
            case "TERM 1":             
            try{
                //year 1
             pst=conn.prepareStatement(expectedfeeperyear); 
             pst.setString(1, "1");
             rs=pst.executeQuery();
            while(rs.next()){
                expectedyear=rs.getDouble(1);
               
              
            }
            pst=conn.prepareStatement(fee_paid_yearly);
            pst.setString(1, "1");
            rs=pst.executeQuery();
            while(rs.next()){
                paidyear=rs.getDouble(1); 
                
            }
            if((expectedyear-paidyear)<0){
                setOverpay(paidyear-expectedyear);
                 
            }
            else setUnderpay(expectedyear-paidyear); 
              
            
            //year two
             pst=conn.prepareStatement(expectedfeeperyear);  
             pst.setString(1, "2");
             rs=pst.executeQuery();
            while(rs.next()){
                expectedyear=rs.getDouble(1)+getUnderpay();
                 
              
            }
            pst=conn.prepareStatement(fee_paid_yearly);
            pst.setString(1, "2");
            rs=pst.executeQuery();
            while(rs.next()){
                paidyear=rs.getDouble(1)+getOverpay();             
            }
            if((expectedyear-paidyear)<0){
                setOverpay(-expectedyear+paidyear);
            }
            else setUnderpay(expectedyear-paidyear);
            
            //year 3
            pst=conn.prepareStatement(expectedfeeperyear); 
              pst.setString(1, "3");
             rs=pst.executeQuery();
            while(rs.next()){
                expectedyear=rs.getDouble(1)+getUnderpay();
              
            }
            pst=conn.prepareStatement(fee_paid_yearly);
            pst.setString(1, "3");
            rs=pst.executeQuery();
            while(rs.next()){
                paidyear=rs.getDouble(1)+getOverpay();             
            }
            if((expectedyear-paidyear)<0){
                setOverpay(-expectedyear+paidyear);
            }
            else setUnderpay(expectedyear-paidyear); 
            
            //term1 computation
            pst=conn.prepareStatement(expectedfeetermly);
             pst.setString(1, "TERM 1");
            rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1)+getUnderpay();              
            }
            pst=conn.prepareStatement(fee_paidtermly);
            pst.setString(1, "TERM 1");
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1)+getOverpay();          
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
           }
           else
               setUnderpay(expected_term-paid_term);
            
            } catch (SQLException ex) {
            Logger.getLogger(ViewBalance.class.getName()).log(Level.SEVERE, null, ex);
        }
                break;
            case "TERM 2": 
             try{
                    //year 1
             pst=conn.prepareStatement(expectedfeeperyear); 
             pst.setString(1, "1");
             rs=pst.executeQuery();
            while(rs.next()){
                expectedyear=rs.getDouble(1);
            
              
            }
            pst=conn.prepareStatement(fee_paid_yearly);
            pst.setString(1, "1");
            rs=pst.executeQuery();
            while(rs.next()){
                paidyear=rs.getDouble(1); 
                 
            }
            if((expectedyear-paidyear)<0){
                setOverpay(paidyear-expectedyear);
                
            }
            else setUnderpay(expectedyear-paidyear); 
             
            
            //year two
             pst=conn.prepareStatement(expectedfeeperyear);  
             pst.setString(1, "2");
             rs=pst.executeQuery();
            while(rs.next()){
                expectedyear=rs.getDouble(1)+getUnderpay();
                 
              
            }
            pst=conn.prepareStatement(fee_paid_yearly);
            pst.setString(1, "2");
            rs=pst.executeQuery();
            while(rs.next()){
                paidyear=rs.getDouble(1)+getOverpay();             
            }
            if((expectedyear-paidyear)<0){
                setOverpay(-expectedyear+paidyear);
            }
            else setUnderpay(expectedyear-paidyear);
            
            //year 3
            pst=conn.prepareStatement(expectedfeeperyear); 
              pst.setString(1, "3");
             rs=pst.executeQuery();
            while(rs.next()){
                expectedyear=rs.getDouble(1)+getUnderpay();
              
            }
            pst=conn.prepareStatement(fee_paid_yearly);
            pst.setString(1, "3");
            rs=pst.executeQuery();
            while(rs.next()){
                paidyear=rs.getDouble(1)+getOverpay();             
            }
            if((expectedyear-paidyear)<0){
                setOverpay(-expectedyear+paidyear);
            }
            else setUnderpay(expectedyear-paidyear); 
                 //term 1
             pst=conn.prepareStatement(expectedfeetermly);
             pst.setString(1, "TERM 1");
             rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1)+getUnderpay();              
            }
            pst=conn.prepareStatement(fee_paidtermly);
            pst.setString(1, "TERM 1");
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1)+getOverpay();          
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
           }
           else
               setUnderpay(expected_term-paid_term);
           //term 2
             pst=conn.prepareStatement(expectedfeetermly);
             pst.setString(1, "TERM 2");
             rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1)+getUnderpay();              
            }
            pst=conn.prepareStatement(fee_paidtermly);
            pst.setString(1, "TERM 2");
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1)+getOverpay();          
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
           }
           else
               setUnderpay(expected_term-paid_term);
            
            } catch (SQLException ex) {
            Logger.getLogger(ViewBalance.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            
                break;
            case "TERM 3": 
                try{
                       //year 1
             pst=conn.prepareStatement(expectedfeeperyear); 
             pst.setString(1, "1");
             rs=pst.executeQuery();
            while(rs.next()){
                expectedyear=rs.getDouble(1);
               
              
            }
            pst=conn.prepareStatement(fee_paid_yearly);
            pst.setString(1, "1");
            rs=pst.executeQuery();
            while(rs.next()){
                paidyear=rs.getDouble(1); 
                  
            }
            if((expectedyear-paidyear)<0){
                setOverpay(paidyear-expectedyear);
                
            }
            else setUnderpay(expectedyear-paidyear); 
             
            
            //year two
             pst=conn.prepareStatement(expectedfeeperyear);  
             pst.setString(1, "2");
             rs=pst.executeQuery();
            while(rs.next()){
                expectedyear=rs.getDouble(1)+getUnderpay();
                  
              
            }
            pst=conn.prepareStatement(fee_paid_yearly);
            pst.setString(1, "2");
            rs=pst.executeQuery();
            while(rs.next()){
                paidyear=rs.getDouble(1)+getOverpay();             
            }
            if((expectedyear-paidyear)<0){
                setOverpay(-expectedyear+paidyear);
            }
            else setUnderpay(expectedyear-paidyear);
            
            //year 3
            pst=conn.prepareStatement(expectedfeeperyear); 
              pst.setString(1, "3");
             rs=pst.executeQuery();
            while(rs.next()){
                expectedyear=rs.getDouble(1)+getUnderpay();
              
            }
            pst=conn.prepareStatement(fee_paid_yearly);
            pst.setString(1, "3");
            rs=pst.executeQuery();
            while(rs.next()){
                paidyear=rs.getDouble(1)+getOverpay();             
            }
            if((expectedyear-paidyear)<0){
                setOverpay(-expectedyear+paidyear);
            }
            else setUnderpay(expectedyear-paidyear); 
                    //term 1
             pst=conn.prepareStatement(expectedfeetermly);
             pst.setString(1, "TERM 1");
             rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1)+getUnderpay();              
            }
            pst=conn.prepareStatement(fee_paidtermly);
             pst.setString(1, "TERM 1");
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1)+getOverpay();          
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
           }
           else
               setUnderpay(expected_term-paid_term);
           //term 2
             pst=conn.prepareStatement(expectedfeetermly);
             pst.setString(1, "TERM 2");
            rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1)+getUnderpay();              
            }
            pst=conn.prepareStatement(fee_paidtermly);
             pst.setString(1, "TERM 2");
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1)+getOverpay();          
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
           }
           else
               setUnderpay(expected_term-paid_term);
           //term 3
            pst=conn.prepareStatement(expectedfeetermly);
             pst.setString(1, "TERM 3");
            rs=pst.executeQuery();
            if(rs.next()){
                 expected_term = rs.getDouble(1)+getUnderpay();              
            }
            pst=conn.prepareStatement(fee_paidtermly);
             pst.setString(1, "TERM 3");
            rs=pst.executeQuery();
            while(rs.next()){
                paid_term=rs.getDouble(1)+getOverpay();          
                
            }
           if((expected_term-paid_term)<0){
               setOverpay(paid_term-expected_term);
           }
           else
               setUnderpay(expected_term-paid_term);
            
            } catch (SQLException ex) {
            Logger.getLogger(ViewBalance.class.getName()).log(Level.SEVERE, null, ex);
        }
                break;
        
    }
    }
    
}

    public double getOverpay() {
        return overpay;
    }

    public void setOverpay(double overpay) {
        this.overpay = overpay;
    }

    public double getUnderpay() {
        return underpay;
    }

    public void setUnderpay(double underpay) {
        this.underpay = underpay;
    }

   private boolean admnoValid(String admno) {
   
    try {
        String parent ="select student_adm from student where student_adm='"+admno+"' and year='"+combo_year.getSelectedItem()+"'";
        pst=conn.prepareStatement(parent);
        rs=pst.executeQuery();
        if(rs.next())
        return true;
        else
            return false;  
        
        
    } catch (SQLException ex) {       
        Logger.getLogger(FeeModule.class.getName()).log(Level.SEVERE, null, ex);
        return false;
    }
    }
   
    
    

      
}
