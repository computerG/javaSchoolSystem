/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package schoolsystem;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author codeGeek
 */
public class ListDepartment extends javax.swing.JDialog {
 private DatabaseConnect dbcon;
    private Connection conn;
    PreparedStatement pst;
    ResultSet rs;
    private String delete_item;
    private AllocateDepartments add;
    private final DefaultListModel listModel;
    
    /**
     * Creates new form ListDepartment
     */
    public ListDepartment(JFrame frame,boolean modal) {    
        super(frame, modal);
        initComponents();
          try {
              
            dbcon=new DatabaseConnect();
            conn=dbcon.dbConnect();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AddUser.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(AddUser.class.getName()).log(Level.SEVERE, null, ex);
        }
           listModel=new DefaultListModel();
           list_item.setModel(listModel);
           populateDepartment();
           populateTable();
           enableDisableButtons();
        
         
    }

   public void populateDepartment(){
      listModel.removeAllElements();
    try {
            String allTeachers="select department_name from department";
            pst=conn.prepareStatement(allTeachers);
            rs=pst.executeQuery();           
             while(rs.next())  {
               listModel.addElement(rs.getString("department_name"));
               list_item.setSelectedIndex(0);
             } 
             enableDisableButtons();              
        }
        catch (SQLException ex) { 
        Logger.getLogger(AllocateDepartments.class.getName()).log(Level.SEVERE, null, ex);
        }
  }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btn_update = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        department_list = new javax.swing.JTable();
        btn_allocate = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        btn_add_department = new javax.swing.JButton();
        btn_refresh = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        list_item = new javax.swing.JList();
        btn_list_update = new javax.swing.JButton();
        list_remove = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Department list");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("List of allocated department"));
        jPanel1.setInheritsPopupMenu(true);

        btn_update.setText("Update");
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });

        department_list.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(department_list);

        btn_allocate.setText("Allocate");
        btn_allocate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_allocateActionPerformed(evt);
            }
        });

        btn_delete.setText("Delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        btn_add_department.setText("Add Department");
        btn_add_department.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_add_departmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btn_update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_allocate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btn_add_department))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btn_add_department)
                        .addGap(4, 4, 4)
                        .addComponent(btn_allocate, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_update)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_delete))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44))
        );

        btn_refresh.setText("Refresh");
        btn_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshActionPerformed(evt);
            }
        });

        list_item.setBorder(javax.swing.BorderFactory.createTitledBorder("List of Department"));
        list_item.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(list_item);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 20, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
        );

        btn_list_update.setText("Update");
        btn_list_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_list_updateActionPerformed(evt);
            }
        });

        list_remove.setText("Remove");
        list_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                list_removeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_list_update)
                    .addComponent(list_remove))
                .addContainerGap(286, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 477, Short.MAX_VALUE)
                        .addComponent(btn_refresh)))
                .addGap(88, 88, 88))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btn_refresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_list_update)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(list_remove)
                .addGap(118, 118, 118))
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
    if(department_list.getRowCount()>0){
        int row=department_list.getSelectedRow();
     delete_item=department_list.getModel().getValueAt(row,1 ).toString();      
        int confirm= JOptionPane.showConfirmDialog(null, "Do you want to delete Department", "Delete Department", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
   if(confirm==JOptionPane.OK_OPTION){
         
      
       if(deletedeprtment(delete_item)){
          JOptionPane.showMessageDialog(null, "Department Deleted");
          populateTable();
       }
       else{
             JOptionPane.showMessageDialog(null, "Department not Deleted");
             
       }
   }
   else   JOptionPane.showMessageDialog(null, "You cancelled Department removal");
    }
    else{
        
    }
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_allocateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_allocateActionPerformed
      add=new AllocateDepartments(this, true);
     add.setVisible(true);
    }//GEN-LAST:event_btn_allocateActionPerformed

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
      if(department_list.getRowCount()>0){
        int row=department_list.getSelectedRow();
       delete_item=department_list.getModel().getValueAt(row,0 ).toString(); 
        String hod=department_list.getModel().getValueAt(row,1 ).toString();
       add=new AllocateDepartments(this,true,delete_item,hod);
       add.setVisible(true);}
      else{
          
      }
    }//GEN-LAST:event_btn_updateActionPerformed

    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed
        populateTable();
    }//GEN-LAST:event_btn_refreshActionPerformed

    private void btn_add_departmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_add_departmentActionPerformed
        String department_name=JOptionPane.showInputDialog(null, "Enter the departmen name", "Department name ", JOptionPane.PLAIN_MESSAGE);
        if(department_name!=null){
        if(!department_name.isEmpty()){
        try {
              String updateDepartment="insert into department (department_name) values(?)";
              pst=conn.prepareStatement(updateDepartment);
              pst.setString(1, department_name);             
              if(pst.executeUpdate()>0)
              {
                  JOptionPane.showMessageDialog(null, "Department inserted successfully");
                      populateDepartment();
                      
                  
              }else{
                  JOptionPane.showMessageDialog(null, "Department not inserted");
              }
          } catch (SQLException ex) {
             Logger.getLogger(AddUser.class.getName()).log(Level.SEVERE, null, ex);
          }
        }
        else{
             JOptionPane.showMessageDialog(null, "Empty deparptment name");
        }
        }
        else JOptionPane.showMessageDialog(null, "No value Entered");
    }//GEN-LAST:event_btn_add_departmentActionPerformed

    private void btn_list_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_list_updateActionPerformed
         String department_name=JOptionPane.showInputDialog(null, "Enter the department name", listModel.elementAt(list_item.getSelectedIndex()).toString());
        if(department_name!=null){
        if(!department_name.isEmpty()){
        try {
              String updateDepartment="update department set department_name=? where department_name=?";
              pst=conn.prepareStatement(updateDepartment);
              pst.setString(1, department_name);     
              pst.setString(2, listModel.elementAt(list_item.getSelectedIndex()).toString());  
              if(pst.executeUpdate()>0)
              {
                  JOptionPane.showMessageDialog(null, "Department updated successfully");                               
                  populateDepartment();
              }else{
                  JOptionPane.showMessageDialog(null, "Department not updated");
              }
          } catch (SQLException ex) {
               JOptionPane.showMessageDialog(null, "");
              
          }
        }
        else{
             JOptionPane.showMessageDialog(null, "Empty deparptment name");
        }
        }
        else JOptionPane.showMessageDialog(null, "No value Entered");
    }//GEN-LAST:event_btn_list_updateActionPerformed

    private void list_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_list_removeActionPerformed
        int confirm= JOptionPane.showConfirmDialog(null, "Do you want to Delete Department", "Delete Department", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
       if(confirm==JOptionPane.OK_OPTION){
       if(deletedeprt( listModel.elementAt(list_item.getSelectedIndex()).toString())){
          JOptionPane.showMessageDialog(null, "Department Deleted");
          populateTable();
          populateDepartment();
       }
       else{
             JOptionPane.showMessageDialog(null, "Department not Deleted");
             populateTable();
             populateDepartment();
             
       }
   }
   else   JOptionPane.showMessageDialog(null, "You cancelled Department deletion");
    }//GEN-LAST:event_list_removeActionPerformed

    /**
     * @param args the command line arguments
     */
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add_department;
    private javax.swing.JButton btn_allocate;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_list_update;
    private javax.swing.JButton btn_refresh;
    private javax.swing.JButton btn_update;
    private javax.swing.JTable department_list;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList list_item;
    private javax.swing.JButton list_remove;
    // End of variables declaration//GEN-END:variables

    private boolean deletedeprtment(String item) {               

        try {
            String delete="update department set headofdepartment=? where headofdepartment=?";
            pst=conn.prepareStatement(delete);
            pst.setString(1, null);
            pst.setString(2, delete_item);
            if(pst.executeUpdate()>0){
                return true;
            }
            else  return  false;
            //To change body of generated methods, choose Tools | Templates.
        } catch (SQLException ex) {
            Logger.getLogger(DeleteUser.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        } //To change body of generated methods, choose Tools | Templates.
    }
 public void deleteUser(String _id){
      try {
            String delete="delete from users where department_id=?";
            pst=conn.prepareStatement(delete);
            pst.setString(1, _id);
            if(pst.executeUpdate()>0){
              
            }
            
            //To change body of generated methods, choose Tools | Templates.
        } catch (SQLException ex) {
            Logger.getLogger(DeleteUser.class.getName()).log(Level.SEVERE, null, ex);
           
        } //To change body of g
 }
private boolean deletedeprt(String item) {
   
       deleteUser( getuserid(item));
    try {
           
            String delete="delete from department where department_name=?";
            pst=conn.prepareStatement(delete);
            pst.setString(1, item);
            if(pst.executeUpdate()>0){
                return true;
            }
            else  return  false;
            //To change body of generated methods, choose Tools | Templates.
        } catch (SQLException ex) {
            Logger.getLogger(DeleteUser.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        } //To change body of generated methods, choose Tools | Templates.
    }
    private void populateTable() {
        try {
            String allTeachers="select department_name as Department,headofdepartment as Tscno,surname,firstname as Firstname,lastname as Lastname from department inner join teacher on headofdepartment=teacher.tscno";
            pst=conn.prepareStatement(allTeachers);
            rs=pst.executeQuery();                        
             department_list.setModel(new ResultSetTableModel(rs));
             enableDisableButtons();
             
         
        }
        catch (SQLException ex) {
            Logger.getLogger(TeacherList.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String getuserid(String item) {
      try {
            String allTeachers="select department_id  from department where department_name=?";
            pst=conn.prepareStatement(allTeachers);
            pst.setString(1, item);
            rs=pst.executeQuery();           
            if (rs.next()) {
             return rs.getString("department_id");
          }
            else return null;
              
        }
        catch (SQLException ex) {
            Logger.getLogger(TeacherList.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }

    private void enableDisableButtons() {
        if(!(department_list.getRowCount()>0)){
             btn_delete.setEnabled(false);
             btn_update.setEnabled(false);
             
          }
          else{
              department_list.setRowSelectionInterval(0, 0);
               btn_delete.setEnabled(true);
               btn_update.setEnabled(true);
               
          }
          
         if(!(listModel.getSize()>0)){
             btn_list_update.setEnabled(false);
             list_remove.setEnabled(false);
             btn_allocate.setEnabled(false);
             
         }
         else{
              list_remove.setEnabled(true);
              btn_list_update.setEnabled(true);
              btn_allocate.setEnabled(true);
         }//To change body of generated methods, choose Tools | Templates.
    }
}
